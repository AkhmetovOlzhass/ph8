generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model UserTaskProgress {
  id        String       @id @default(uuid())
  status    ProgressStatus @default(NOT_STARTED)
  lastAnswer String?
  attempts  Int          @default(0)
  updatedAt DateTime     @updatedAt
  createdAt DateTime     @default(now())

  userId    String
  user      User         @relation(fields: [userId], references: [id])

  taskId    String
  task      Task         @relation(fields: [taskId], references: [id])

  @@unique([userId, taskId])
}


enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  SOLVED
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tasksCreated Task[]     @relation("UserTasks")
  progresses   UserTaskProgress[]
}

model Topic {
  id        String   @id @default(uuid())
  title     String
  slug      String   @unique
  parentId  String?  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  schoolClass SchoolClass
  tasks     Task[]
}

model Task {
  id        String   @id @default(uuid())
  title     String
  bodyMd    String
  difficulty Difficulty @default(EASY)
  status    TaskStatus @default(DRAFT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  topicId   String
  topic     Topic     @relation(fields: [topicId], references: [id], onDelete: Cascade)

  authorId  String
  author    User      @relation("UserTasks", fields: [authorId], references: [id])

  officialSolution String?
  correctAnswer    String?
  answerType       AnswerType @default(TEXT)
  progresses UserTaskProgress[]
}

enum Role {
  USER
  ADMIN
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
  EXTREME
}

enum TaskStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum SchoolClass {
  SEVEN
  EIGHT
  NINE
  TEN
  ELEVEN
}

enum AnswerType {
  TEXT
  NUMBER
  FORMULA
}